@Library('deploy-conf')_
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"
        
        ansiColor('xterm') {
            stage('Checkout') {
                cleanWs()
                if(params.github_release_tag == ""){
                    checkout scm
                    commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    branch_name = sh(script: 'git name-rev --name-only HEAD | rev | cut -d "/" -f1| rev', returnStdout: true).trim()
                    artifact_version = branch_name + "_" + commit_hash
                    println(ANSI_BOLD + ANSI_YELLOW + "github_release_tag not specified, using the latest commit hash: " + commit_hash + ANSI_NORMAL)
                }
                else {
                    def scmVars = checkout scm
                    checkout scm: [$class: 'GitSCM', branches: [[name: "refs/tags/${params.github_release_tag}"]],  userRemoteConfigs: [[url: scmVars.GIT_URL]]]
                    artifact_version = params.github_release_tag
                    println(ANSI_BOLD + ANSI_YELLOW + "github_release_tag specified, building from github_release_tag: " + params.github_release_tag + ANSI_NORMAL)
                }
                echo "artifact_version: "+ artifact_version
            }
        }

        stage('Build') {
            withCredentials([string(credentialsId: 'kp_private_api_key', variable: 'kp_private_api_key'), string(credentialsId: 'kp_ft_access_key', variable: 'kp_ft_access_key')]) {
            sh """
                 export kp_private_api_key=$kp_private_api_key
                 export kp_ft_access_key=$kp_ft_access_key
                 cd kp_service_test
                 ls
                 mvn -X clean verify
              """
            }
        }


    }

    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }

    finally {
             archiveArtifacts 'kp_service_test/target/target/citrus-reports/citrus-test-results.html'
             email_notify("${kp_team_email_group}")
    	    }

}
